diff --git a/src/main.cpp b/src/main.cpp
index 74a9eac..fb166ef 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -1,205 +1,22 @@
 #include <SDL2/SDL.h>
-#include <deque>
 #include <algorithm>
+#include <deque>
 #include <fstream>
 #include <iostream>
 #include <mutex>
 #include <thread>
 #include <vector>
 
+#include "memory.h"
+#include "register.h"
 /*
  * g++ -std=gnu++17 main.cpp -lSDL2
  */
-
-struct Memory {
-  public:
-    Memory() : main(capacity, 0) {}
-    ~Memory() {}
-    bool set_value(size_t location, uint8_t value) {
-        if (location < capacity) {
-            main[location] = value;
-            return true;
-        } else {
-            return false;
-            auto m1 = std::max(1, 2);
-        }
-    }
-    uint8_t get_value(size_t location) {
-        if (location < capacity) {
-            return main[location];
-        } else {
-            throw std::out_of_range("Invalid memory access");
-        }
-    }
-
-	void print_mem(uint16_t address, uint16_t num_bytes) {
-		for (uint16_t i = 0; i < num_bytes; i++) {
-			std::cout << address+i << ": " << +main[address+i] << std::endl;
-		}
-	}
-
-    constexpr static size_t capacity = 4096; // 2^12 -> 13 -> 0x1000
-    constexpr static size_t program_start_address = 0x200;
-    std::vector<uint8_t> main;
+enum class Keypress {
+	right = 5, left = 6, up = 7, down = 8, nil
 };
 
-struct Registers {
-  public:
-    // START - ARITHMETIC OPS
-    void add_num_in_register(uint8_t num, uint8_t reg) {
-        registers[reg] += num;
-    }
-    void add_reg_value_to_register(uint8_t from, uint8_t to) {
-        // TODO: Test this function
-        if (registers[to] + registers[from] >= 0xFF) {
-            registers[15] = 0x01;
-        } else {
-            registers[15] = 0x00;
-        }
-        registers[to] += registers[from];
-    }
-    void store_num_in_register(uint8_t num, uint8_t reg) {
-        registers[reg] = num;
-    }
-    void store_reg_value_to_register(uint8_t from, uint8_t to) {
-        registers[to] = registers[from];
-    }
-
-    void sub_reg_value_from_register(uint8_t reg_idx, uint8_t from) {
-        if (registers[from] - registers[reg_idx] <= 0x00) {
-            registers[15] = 0x00;
-        } else {
-            registers[15] = 0x01;
-        }
-        registers[from] -= registers[reg_idx];
-    }
-    void sub_and_set(uint8_t reg_idx, uint8_t from) {
-        if (registers[reg_idx] - registers[from] <= 0x00) {
-            registers[15] = 0x00;
-        } else {
-            registers[15] = 0x01;
-        }
-        registers[from] = registers[reg_idx] - registers[from];
-    }
-
-    void set_I_register(uint16_t value) { Ireg = value; }
-    // END - ARITHMETIC OPS
-
-    // START - BIT OPS
-    void logical_and(uint8_t reg_one, uint8_t reg_two) {
-        reg_two = reg_one & reg_two;
-    }
-    void logical_or(uint8_t reg_one, uint8_t reg_two) {
-        reg_two = reg_one | reg_two;
-    }
-    void logical_xor(uint8_t reg_one, uint8_t reg_two) {
-        reg_two = reg_one ^ reg_two;
-    }
-    void shift_rone_store(uint8_t from, uint8_t to) {
-        registers[0xF] = from & 0x1;
-        to = from >> 1;
-    }
-    void shift_lone_store(uint8_t from, uint8_t to) {
-        registers[0xF] = from & 0x80;
-        to = from << 1;
-    }
-    void set_reg_to_rand_with_mask(uint8_t reg, uint8_t mask) {
-        // TODO: SHould this be logical and?
-        uint8_t random_number = 0x4F;
-        reg = random_number & mask;
-    }
-    // END - BIT OPS
 
-    // START - FLOW CONTROL
-    void jmp_to_address(uint16_t address) {
-        // TODO: Fill this up!
-    }
-    void jmp_to_address_offset(uint16_t address) {
-        // TODO: Fill this up!
-    }
-    // END - FLOW CONTROL
-
-    // START
-    void ex_subroutine_at_address(uint16_t address) {
-        // TODO
-    }
-
-    void ret_from_subroutine() {
-        // TODO
-    }
-    // END
-
-    // START - DRAWING
-    void draw_sprite(uint8_t reg1, uint8_t reg2, uint8_t size) {}
-    // END - DRAWING
-
-    void start_timer() {
-        // std::cout << "Start timer\n";
-        std::chrono::system_clock::time_point now =
-            std::chrono::system_clock::now();
-        while (true) {
-            auto end = std::chrono::system_clock::now();
-            std::chrono::duration<double> elapsed_seconds = end - now;
-            double etd = elapsed_seconds.count();
-            if (etd >= 1.0 / 60.0) {
-                std::cout << "Tick: " << std::endl;
-                std::lock_guard<std::mutex> lk{m};
-                std::cout << "Decreasing timer: " << +delay_timer << std::endl;
-                delay_timer -= 1;
-                if (delay_timer == 0) {
-                    break;
-                }
-            }
-        }
-        // std::cout << "End timer\n";
-    }
-
-    uint8_t read_timer() {
-        // std::cout << "Trying to read the timer" << std::endl;
-        std::lock_guard<std::mutex> lk{m};
-        std::cout << "Timer value: " << +delay_timer << std::endl;
-        return delay_timer;
-    }
-    uint8_t read_sound_timer() {
-        // std::cout << "Trying to read the timer" << std::endl;
-        std::lock_guard<std::mutex> lk{m};
-        std::cout << "Timer value: " << +sound_timer << std::endl;
-        return sound_timer;
-    }
-
-    void set_timer(uint8_t value) {
-        std::lock_guard<std::mutex> lk{m};
-        delay_timer = value;
-        std::cout << "Timer value set: " << +delay_timer << std::endl;
-    }
-    void set_sound_timer(uint8_t value) {
-        std::lock_guard<std::mutex> lk{m};
-        sound_timer = value;
-        std::cout << "Timer value set: " << +delay_timer << std::endl;
-    }
-
-    void print_registers() {
-        for (int i = 0; i < 16; i++) {
-            std::cout << "V" << i << " | ";
-        }
-		std::cout << " I ";
-        std::cout << std::endl;
-        for (int i = 0; i < 16; i++) {
-            std::cout << std::setw(2) << +registers[i] << " | ";
-        }
-		std::cout << std::setw(3) << Ireg;
-        std::cout << std::endl;
-    }
-
-    Registers() : registers(16, 0) {}
-
-    std::vector<uint8_t> registers; // 00 -> FF
-    uint16_t Ireg;                  // 0000 -> FFFF
-    uint8_t delay_timer = 0xFF;
-    uint8_t sound_timer = 0xFF;
-    std::mutex m;
-    std::condition_variable cv;
-};
 
 void edit(int a) { std::thread tt(edit, 1); }
 
@@ -257,6 +74,7 @@ struct Display {
 
     void update(SDL_Window *_window) {
 
+        std::lock_guard<std::mutex> lk{dmut};
         SDL_Surface *window_surface = SDL_GetWindowSurface(_window);
         unsigned int *pixels =
             reinterpret_cast<unsigned int *>(window_surface->pixels);
@@ -266,7 +84,6 @@ struct Display {
         auto format = SDL_GetPixelFormatName(window_surface->format->format);
 
         int scale = 10;
-        std::lock_guard<std::mutex> lk{dmut};
         for (int y = 0; y < 32 * scale; y++) {
             for (int x = 0; x < 64 * scale; x++) {
                 auto bow = screen[y / scale][x / scale];
@@ -291,20 +108,27 @@ struct Display {
 struct CPU {
 
     // CPU Methods
-    void process_instructions(Memory &ram, Display &display) {
+    void process_instructions(Memory &ram, Display &display, Keypress& key) {
         uint16_t iaddress = ram.program_start_address;
         std::cout << "Starting processing" << std::endl;
-		uint16_t tcalled = 0;
-        while (iaddress != 0x21A && tcalled <= 2) {
+        uint16_t tcalled = 0;
+        // tcalled <= 107, wait for key press
+        while (iaddress != 0x228) {
             uint8_t fb = ram.main[iaddress];
             uint8_t sb = ram.main[iaddress + 1];
-			if (iaddress == 0x214) { tcalled++; }
+            if (iaddress == 0x214) {
+                tcalled++;
+            }
+
+			std::cout << "IADDRESS: " << std::right << std::setfill('0') << std::setw(3) << std::hex << iaddress << std::endl;
             // std::right << std::setfill('0') << std::setw(4) << std::hex
             std::cout << "F:" << std::right << std::setfill('0') << std::setw(2)
                       << std::hex << +fb << std::endl;
             std::cout << "S:" << std::right << std::setfill('0') << std::setw(2)
                       << std::hex << +sb << std::endl;
             if (fb >> 4 == 0x0) {
+                std::cout << "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
+                          << std::endl;
                 if (fb != 0) {
                     std::cout << "CALL ML SUBROUTINE\n";
                 } else {
@@ -322,13 +146,13 @@ struct CPU {
                 }
             } else if (fb >> 4 == 0x1) {
                 uint16_t address = ((fb & 0x0F) << 8) | sb;
-                //stack.push_back(iaddress + 2);
+                // stack.push_back(iaddress + 2);
                 iaddress = address;
                 std::cout << "JUMP TO ADDRESS\n";
                 continue;
             } else if (fb >> 4 == 0x2) {
-				uint16_t one = ((fb & 0x0F) << 8) | sb;
-				std::cout << "ONE: " << std::hex <<  one << std::endl;
+                uint16_t one = ((fb & 0x0F) << 8) | sb;
+                std::cout << "ONE: " << std::hex << one << std::endl;
                 uint16_t address = ((fb & 0x0F) << 8) | sb;
                 stack.push_back(iaddress + 2);
                 iaddress = address;
@@ -346,10 +170,10 @@ struct CPU {
                 uint8_t reg_index = fb & 0x0F;
                 if (rs.registers[reg_index] != number) {
                     iaddress += 2;
-					std::cout << "SKIPPING NXT INST\n";
+                    std::cout << "SKIPPING NXT INST\n";
                 } else {
-					std::cout << "NOT SKIPPING NXT INST\n";
-				}
+                    std::cout << "NOT SKIPPING NXT INST\n";
+                }
             } else if (fb >> 4 == 0x5) {
                 uint8_t reg_index = sb >> 4;
                 uint8_t reg_index2 = fb & 0x0F;
@@ -368,28 +192,24 @@ struct CPU {
                 rs.add_num_in_register(number, reg);
                 std::cout << "ADD NN TO VX\n";
             } else if (fb >> 4 == 0x8) {
-				
-				
-				if ((sb & 0x0F) == 0x0) {
-					uint8_t from = sb >> 4;
+
+                if ((sb & 0x0F) == 0x0) {
+                    uint8_t from = sb >> 4;
                     uint8_t to = fb & 0x0F;
                     rs.store_reg_value_to_register(from, to);
                     std::cout << "V" << +to << " = V" << +from << "\n";
-				}
-                else if ((sb & 0x0F) == 0x2) {
+                } else if ((sb & 0x0F) == 0x2) {
                     uint8_t reg_one = sb >> 4;
                     uint8_t reg_two = fb & 0x0F;
                     rs.logical_and(reg_one, reg_two);
                     std::cout << "V" << +reg_two << " &= V" << +reg_one << "\n";
-                }
-				else if ((sb & 0x0F) == 0x4) {
+                } else if ((sb & 0x0F) == 0x4) {
                     uint8_t reg_one = sb >> 4;
                     uint8_t reg_two = fb & 0x0F;
                     rs.add_reg_value_to_register(reg_one, reg_two);
                     std::cout << "V" << +reg_two << " += V" << +reg_one << "\n";
                 }
 
-
             } else if (fb >> 4 == 0x9) {
                 uint8_t reg_index = sb >> 4;
                 uint8_t reg_index2 = fb & 0x0F;
@@ -398,12 +218,12 @@ struct CPU {
                 }
                 std::cout << "SKIP NXT INST IF VX != VY\n";
             } else if (fb >> 4 == 0xA) {
-                
-				uint16_t address = ((fb & 0x0F) << 8) | sb;
+
+                uint16_t address = ((fb & 0x0F) << 8) | sb;
                 rs.set_I_register(address);
                 std::cout << "STORE " << address << " IN REG I\n";
-            
-			} else if (fb >> 4 == 0xB) {
+
+            } else if (fb >> 4 == 0xB) {
                 uint16_t address = ((fb & 0x0F) << 2) | sb;
                 rs.jmp_to_address_offset(address);
                 std::cout << "JMP TO ADDRESS NNN + V0\n";
@@ -413,54 +233,70 @@ struct CPU {
                 rs.set_reg_to_rand_with_mask(reg, mask);
                 std::cout << "SET VX TO A RAND NUM WITH MASK NN\n";
             } else if (fb >> 4 == 0xD) {
-               	std::cout << "HOORAY! STACK WORKS" << std::endl; 
-				uint8_t reg_index2 = sb >> 4;
+
+                uint8_t reg_index2 = sb >> 4;
                 uint8_t reg_index = fb & 0x0F;
                 uint8_t size = sb & 0x0F;
 
-				uint8_t x = rs.registers[reg_index];
-				uint8_t y = rs.registers[reg_index2];
-               	
-				for (uint8_t i = 0; i < size; i++) {
-
-					uint8_t byte = ram.main[rs.Ireg + i];
-						
-					std::cout << "SDATA: " << +byte << " BYTES: ";
-
-					std::deque<uint8_t> bvec(8, 0);
-					// E0 => 1110 0000
-					// 20 => 0010 0000	
-					// E0 => 1110 0000
-					// 80 => 1000 0000
-					// E0 => 1110 0000
-					// {0000 0111}
-					int idx = 7;
-					while (byte > 0 || idx >= 0) {
-						if (byte % 2 == 1) {
-							bvec[idx] = 1;	
-						} else {
-							bvec[idx] = 0;
-						}
-						byte /= 2;
-						idx--;
-					}
-					for (const auto& e : bvec) {
-						std::cout << +e;
-					}
-					std::cout << std::endl;
-					for (uint8_t j = 0; j < 8; j++) {
-						if (bvec[j] == 1) {
-							buffer[y+i][x+j] = 255;
-						} else {
-							buffer[y+i][x+j] = 0;
-						}
-					}
-				}	
-				std::cout << "DRW SPRITE AT V" << +reg_index << ",V" << +reg_index2 << " WITH " << +size<< " BYTES OF SPRITE DATA STORED AT I: " << rs.Ireg << "\n";
-				display.set_screen(buffer);
-				//break;	
-			
-			} else if (fb >> 4 == 0xE) {
+                uint8_t x = rs.registers[reg_index];
+                uint8_t y = rs.registers[reg_index2];
+
+                for (uint8_t i = 0; i < size; i++) {
+
+                    uint8_t byte = ram.main[rs.Ireg + i];
+
+                    // std::cout << "SDATA: " << +byte << " BYTES: ";
+
+                    std::deque<uint8_t> bvec(8, 0);
+                    // E0 => 1110 0000
+                    // 20 => 0010 0000
+                    // E0 => 1110 0000
+                    // 80 => 1000 0000
+                    // E0 => 1110 0000
+                    // {0000 0111}
+                    int idx = 7;
+                    while (byte > 0 || idx >= 0) {
+                        if (byte % 2 == 1) {
+                            bvec[idx] = 1;
+                        } else {
+                            bvec[idx] = 0;
+                        }
+                        byte /= 2;
+                        idx--;
+                    }
+                    /*for (const auto &e : bvec) {
+                        std::cout << +e;
+                    }
+                    std::cout << std::endl;*/
+
+                    for (uint8_t j = 0; j < 8; j++) {
+                        if (y + i > 0 && y + i < 32) {
+                            if (x + j > 0 && x + j < 64) {
+                                if (bvec[j] == 1) {
+                                    buffer[y + i][x + j] = 255;
+                                } else {
+                                    buffer[y + i][x + j] = 0;
+                                }
+                            }
+                        }
+                    }
+                }
+
+                std::cout << "DRW SPRITE AT V" << +reg_index << ",V"
+                          << +reg_index2 << " WITH " << +size
+                          << " BYTES OF SPRITE DATA STORED AT I: " << rs.Ireg
+                          << "\n";
+                display.set_screen(buffer);
+                // std::cout << "AFTER" << std::endl;
+                /*for (const auto &v : buffer) {
+                    for (const auto &e : v) {
+                        std::cout << (e == 255 ? 1 : 0);
+                    }
+                    std::cout << "X" << std::endl;
+                }*/
+                // break;
+
+            } else if (fb >> 4 == 0xE) {
                 if (sb == 0x9E) {
                     auto reg_index = fb & 0x0F;
                     std::cout
@@ -473,14 +309,22 @@ struct CPU {
                 }
             } else if (fb >> 4 == 0xF) {
                 if (sb == 0x07) {
+
                     auto reg_index = fb & 0x0F;
                     rs.registers[reg_index] = rs.read_timer();
                     std::cout << "STORE CV OF DELAY TIMER IN VX\n";
                 } else if (sb == 0x0A) {
+
                     auto reg_index = fb & 0x0F;
+					while (key == Keypress::nil) {
+						// not great
+					}
+					std::cout << "FINALLY A KEPRESS" << std::endl;
                     rs.registers[reg_index] = 0x00;
+					key = Keypress::nil;
                     std::cout << "UI: WAIT FOR KEYPRESS AND STORE VAL IN VX\n";
                 } else if (sb == 0x15) {
+
                     auto reg_index = fb & 0x0F;
                     rs.set_timer(rs.registers[reg_index]);
                     std::cout << "SET D.TIMER TO VAL OF REG VX\n";
@@ -498,42 +342,42 @@ struct CPU {
                     std::cout << "UI: WAIT FOR KEYPRESS AND STORE VAL IN VX\n";
                 } else if (sb == 0x33) {
 
-
-					uint8_t reg = fb & 0x0F;
-					uint8_t val = rs.registers[reg];
-					uint8_t add = 0;
-					uint8_t num = 100;
-					while (add <= 2) {
-						std::cout << "HERE: " << val /num << std::endl;
-						ram.main[rs.Ireg+add] = val / num;	
-						val %= num;
-						num /= 10;
-						add++;
-					}
-                    std::cout << "Store decimal equi of val in VX at I,I+1,I+2\n";
+                    uint8_t reg = fb & 0x0F;
+                    uint8_t val = rs.registers[reg];
+                    uint8_t add = 0;
+                    uint8_t num = 100;
+                    while (add <= 2) {
+                        std::cout << "HERE: " << val / num << std::endl;
+                        ram.main[rs.Ireg + add] = val / num;
+                        val %= num;
+                        num /= 10;
+                        add++;
+                    }
+                    std::cout
+                        << "Store decimal equi of val in VX at I,I+1,I+2\n";
                 } else if (sb == 0x65) {
-					uint8_t max_reg = (fb & 0x0F);
-					for (uint8_t i = 0; i <= max_reg; i++) {
-						rs.registers[i] = ram.main[rs.Ireg+i];
-					}
-                    std::cout << "8/16 FILL V0-VX WITH VALUES FROM MEM[I],MEM[I+1],..\n";
+                    uint8_t max_reg = (fb & 0x0F);
+                    for (uint8_t i = 0; i <= max_reg; i++) {
+                        rs.registers[i] = ram.main[rs.Ireg + i];
+                    }
+                    std::cout << "8/16 FILL V0-VX WITH VALUES FROM "
+                                 "MEM[I],MEM[I+1],..\n";
                 }
             } else {
                 std::cout << "UNRECOGNIZED INSTRUCTION\n";
             }
             iaddress += 2;
         }
-		ram.print_mem(0x294, 3);
+        ram.print_mem(0x294, 3);
         rs.print_registers();
     }
 
-	CPU() : buffer(32, std::vector<uint8_t>(64, 0)) {
-	}
+    CPU() : buffer(32, std::vector<uint8_t>(64, 0)) {}
 
     // CPU Member Vars
     Registers rs;
     std::vector<uint16_t> stack{};
-	std::vector<std::vector<uint8_t>> buffer;
+    std::vector<std::vector<uint8_t>> buffer;
 };
 
 struct Emulator {
@@ -546,7 +390,7 @@ struct Emulator {
         while (instruction_index < is.size()) {
             const auto &i = is[instruction_index];
             // std::cout << "ORIGINAL\n";
-            Interpreter::print_instruction(i);
+            //Interpreter::print_instruction(i);
             uint8_t fb = i >> 8;
             uint8_t sb = (i & (0x00FF));
             // std::cout << "F: " << +fb << "S: " << +sb << std::endl;
@@ -592,7 +436,27 @@ struct Emulator {
         while (!quit) {
             while (SDL_PollEvent(&e)) {
                 if (e.type == SDL_KEYDOWN) {
-                    quit = true;
+                    if (e.key.keysym.sym == SDLK_0) {
+						std::cout << "0 PRESSED" << std::endl;
+						keypress = Keypress::right;
+                    } 
+					else if (e.key.keysym.sym == SDLK_1) {
+						std::cout << "1 PRESSED" << std::endl;
+						keypress = Keypress::left;
+                    }
+					else if (e.key.keysym.sym == SDLK_2) {
+						std::cout << "2 PRESSED" << std::endl;
+						keypress = Keypress::up;
+                    }
+					else if (e.key.keysym.sym == SDLK_3) {
+						std::cout << "3 PRESSED" << std::endl;
+						keypress = Keypress::down;
+                    }
+					else if (e.key.keysym.sym == SDLK_e) {
+						std::cout << "EXIT PRESSED" << std::endl;
+						quit = true;
+                    }
+					
                 } else if (e.type == SDL_WINDOWEVENT) {
                     if (e.window.event == SDL_WINDOWEVENT_SIZE_CHANGED) {
                         std::cout << "Window event" << std::endl;
@@ -604,7 +468,7 @@ struct Emulator {
                 has_started_processesing = true;
                 // cpu.process_instructions(ram, display);
                 cpu_thread = std::thread(&CPU::process_instructions, &cpu,
-                                         std::ref(ram), std::ref(display));
+                                         std::ref(ram), std::ref(display), std::ref(keypress));
                 // std::thread t(&CPU::some_method, &cpu);
             }
             display.update(_window);
@@ -621,6 +485,7 @@ struct Emulator {
     }
 
     // Member Vars
+	Keypress keypress = Keypress::nil;
     CPU cpu;
     Memory ram;
     Display display;
